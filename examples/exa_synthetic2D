using Random
using PyPlot

Random.seed!(0)

include("../src/PWARegression.jl")
PWAR = PWARegression

np = 1000
xt_list = [(rand(), rand()) .- 0.5 for t = 1:np]
pwa_func(x) = x[1] > 0 ? 1.0 + x[2] + randn()*0.01 :
    x[2] > 0 ? 1.0 + x[1] : -(x[1] + x[2])
# pwa_func(x) = abs(x[1]) + randn()*0.01
pwa_func(x) = sin(x[1]*5)*0.5 + 0.5
x_list = map(xt -> [xt..., 1.0], xt_list)
yv_list = map(pwa_func, xt_list)
y_list = map(yv -> [yv], yv_list)

fig = figure(0)
ax = fig.add_subplot(projection="3d")
ax.set_zlim(0, 2.1)
ax.plot(
    getindex.(xt_list, 1), getindex.(xt_list, 2), yv_list,
    ls="none", marker=".", ms=3, c="k"
)

NT = PWAR.Node{Vector{Float64},Vector{Float64}}
graph = PWAR.Graph(NT[])
for (x, y) in zip(x_list, y_list)
    PWAR.add_node!(graph, PWAR.Node(x, y))
end

subgraph = PWAR.Subgraph(graph, BitSet(1:length(graph)))
σ = 0.1

nplot = 100
x1_ = range(-0.6, 0.6, length=nplot)
x2_ = range(-0.6, 0.6, length=nplot)
Xt_ = Iterators.product(x1_, x2_)
X1_ = getindex.(Xt_, 1)
X2_ = getindex.(Xt_, 2)
RES_ = fill(NaN, size(Xt_))

for (k, xt) in enumerate(Xt_)
    xc = [xt..., 1.0]
    A, res, ω_tot = PWAR.generate(subgraph, xc, σ, 3, 1)
    RES_[k] = sqrt(res)
end

ax.contourf(X1_, X2_, RES_, zdir="z", offset=-0.5)

ax.set_xlim(-0.6, 0.6)
ax.set_ylim(-0.6, 0.6)
ax.set_zlim(-0.5, 1)
ax.view_init(elev=14, azim=-70)
fig.savefig("./examples/figures/sine.png", bbox_inches="tight", dpi=100)