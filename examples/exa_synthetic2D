using Random
using LinearAlgebra
using JuMP
using Gurobi
using PyPlot

Random.seed!(0)

include("../src/PWARegression.jl")
PWAR = PWARegression

const GUROBI_ENV = Gurobi.Env()
solver() = Model(optimizer_with_attributes(
    () -> Gurobi.Optimizer(GUROBI_ENV), "OutputFlag"=>false
))

NT = PWAR.Node{Vector{Float64},Float64}
graph = PWAR.Graph(NT[])
aref1 = [1, 2, 1]
aref2 = [0, 2, 2]
aref3 = [0, -2, 3]
for xt in Iterators.product(0:0.05:1, 0:0.1:2)
    local x = vcat(collect(xt), 1.0)
    local η = xt[1] > 0.5 ? dot(aref1, x) :
        xt[2] > 1.0 ? dot(aref2, x) : 
        dot(aref3, x)
    local η = sin(xt[1]*7) + 2
    PWAR.add_node!(graph, PWAR.Node(x, η))
end

fig0 = figure(0)
ax0 = fig0.add_subplot(projection="3d")
for node in graph.nodes
    ax0.plot(
        node.x[1], node.x[2], node.η, ls="none", marker=".", ms=5, c="tab:blue"
    )
end

# local_L2_residual

inodes = BitSet(1:length(graph))
σ = 0.05
β = 1e-6

nplot = 100
x1_ = range(-0.1, 1.1, length=nplot)
x2_ = range(-0.1, 2.2, length=nplot)
Xt_ = Iterators.product(x1_, x2_)
X1_ = getindex.(Xt_, 1)
X2_ = getindex.(Xt_, 2)
RES_ = fill(NaN, size(Xt_))

for (k, xt) in enumerate(Xt_)
    local xc = [xt..., 1.0]
    local res = PWAR.local_L2_residual(graph, inodes, xc, σ, β, 3)
    RES_[k] = sqrt(res)
end

ax0.contourf(X1_, X2_, RES_, zdir="z", offset=0.0)

# regions

ϵ = 0.1
BD = 100
γ = 0.01
δ = 1e-5
inodes_list = PWAR.maximal_regions(
    graph, ϵ, BD, σ, β, γ, δ, 3, solver, solver
)
inodes_list = PWAR.greedy_covering(
    graph, ϵ, BD, σ, β, γ, δ, 3, solver, solver
)
inodes_list = PWAR.optimal_covering(
    graph, ϵ, BD, σ, β, γ, δ, 3, solver, solver, solver
)

fig1 = figure(1)
ax1 = fig1.add_subplot(projection="3d")
colors = collect(keys(matplotlib.colors.TABLEAU_COLORS))

for (k, inodes) in enumerate(inodes_list)
    local c = colors[mod(k - 1, length(colors)) + 1]
    local lb = fill(Inf, 2)
    local ub = fill(-Inf, 2)
    for inode in inodes
        local x = graph.nodes[inode].x
        for k = 1:2
            if x[k] < lb[k]
                lb[k] = x[k]
            end
            if x[k] > ub[k]
                ub[k] = x[k]
            end
        end
    end
    local x1rect = (lb[1], ub[1], ub[1], lb[1], lb[1])
    local x2rect = (lb[2], lb[2], ub[2], ub[2], lb[2])
    ax1.plot(x1rect, x2rect, k, c=c)
end

# Plot planes

nplot = 5

for inodes in inodes_list
    # optim parameters
    local model = solver()
    local a = @variable(model, [1:3], lower_bound=-BD, upper_bound=BD)
    local r = @variable(model, lower_bound=-1)
    for inode in inodes
        local node = graph.nodes[inode]
        @constraint(model, dot(a, node.x) ≤ node.η + r)
        @constraint(model, dot(a, node.x) ≥ node.η - r)
    end
    @objective(model, Min, r)
    optimize!(model)
    @assert termination_status(model) == OPTIMAL
    @assert primal_status(model) == FEASIBLE_POINT
    local a_opt = value.(a)
    # plot
    local lb = fill(Inf, 2)
    local ub = fill(-Inf, 2)
    for inode in inodes
        node = graph.nodes[inode]
        for k = 1:2
            if node.x[k] < lb[k]
                lb[k] = node.x[k]
            end
            if node.x[k] > ub[k]
                ub[k] = node.x[k]
            end
        end
    end
    local x1_ = range(lb[1], ub[1], length=nplot)
    local x2_ = range(lb[2], ub[2], length=nplot)
    local Xt_ = Iterators.product(x1_, x2_)
    local X1_ = getindex.(Xt_, 1)
    local X2_ = getindex.(Xt_, 2)
    local Y_ = map(xt -> dot(a_opt, (xt..., 1.0)), Xt_)
    ax0.plot_surface(X1_, X2_, Y_)
end

ax0.view_init(elev=14, azim=-70)
fig0.savefig("./examples/figures/pwa.png", bbox_inches="tight", dpi=100)